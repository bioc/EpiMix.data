library(tidyr)
library(dplyr)
library(GenomicRanges)
library(RCurl)


# Generate probe annotation from GENCODE ----------------------------------
met.platform <- "EPIC"
file_to_read <- paste0('Annotation/', met.platform, '.hg38.manifest.gencode.v36.tsv')
ProbeAnnotation <- read.table(file = file_to_read , sep = '\t', header = TRUE)
ProbeAnnotation <- ProbeAnnotation[, c("probeID", "geneNames", "transcriptTypes", "CpG_beg")]
ProbeAnnotation <- ProbeAnnotation[!is.na(ProbeAnnotation$probeID) & !is.na(ProbeAnnotation$geneNames), ]
ProbeAnnotation <- separate_rows(ProbeAnnotation, geneNames, transcriptTypes, sep = ";")
ProbeAnnotation <- distinct(ProbeAnnotation)
#EpicProbeAnnotation <- EpicProbeAnnotation[!endsWith(EpicProbeAnnotation$transcriptTypes, "pseudogene"), ]
sum(is.na(ProbeAnnotation)) # There is no missing values
length(unique(ProbeAnnotation$probeID)) # EPIC: 715,970, HM450:423,686
file_to_save <- paste0('Annotation/', met.platform, "ProbeAnnotation.rds")
saveRDS(ProbeAnnotation, file = file_to_save)

# Generate probe annotation lncRNAs from GENCODE ----------------------------------
met.platform = "EPIC"
target = "lncRNA"
ProbeAnnotation = readRDS(paste0('Annotation/', met.platform, "ProbeAnnotation.rds"))
ProbeAnnotation = ProbeAnnotation[ProbeAnnotation$transcriptTypes==target,]
target.probes = ProbeAnnotation$probeID
names(target.probes) = ProbeAnnotation$geneNames
file_to_save = paste0("Annotation/", met.platform, "_", target, "_probes.rds")
saveRDS(target.probes, file_to_save)


# Identify miRNA probes from miRbase --------------------------------------
library(ape)
plat = "HM27"
#download.file("https://www.mirbase.org/ftp/CURRENT/genomes/hsa.gff3", destfile = "Annotation/miRbase.hsa.gff3")
hsa.gffs = read.gff("Annotation/miRbase.hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
hsa.gffs = hsa.gffs[hsa.gffs$type == "miRNA_primary_transcript", ]
dim(hsa.gffs) #1918,9

# extract the miR IDs and miRNA names from the attribute column
IDs = sapply(hsa.gffs$attributes, function(x) unlist(strsplit(x, ";"))[1])
IDs = unname(sapply(IDs, function(x) substr(x, 4, nchar(x))))
Names = sapply(hsa.gffs$attributes, function(x) unlist(strsplit(x, ";"))[3])
Names = unname(sapply(Names, function(x) substr(x, 6, nchar(x))))

# convert the gff dataframe to GRange object, note that we need to give a 5KB offset for each miRNA gene to map the probes
gr.hsa.gffs = GRanges(seqnames = hsa.gffs$seqid, ranges = IRanges(start = hsa.gffs$start - 5000, end = hsa.gffs$end + 5000))
names(gr.hsa.gffs) = Names
values(gr.hsa.gffs) = data.frame(ID = IDs)

# find overlaps between probes and miRNA genes
ProbeAnnotation = EpiMix_getInfiniumAnnotation(plat = plat, genome = "hg38")
hits = findOverlaps(ProbeAnnotation, gr.hsa.gffs, ignore.strand = TRUE)
miRNA.probes = data.frame(probe = names(ProbeAnnotation)[queryHits(hits)], gene = names(gr.hsa.gffs)[subjectHits(hits)])

# map precursor names to HGNC
df.gene.names = mapTranscriptToGene(miRNA.probes$gene)
colnames(df.gene.names) = c("gene", "HGNC")
miRNA.probes = merge(miRNA.probes, df.gene.names)
miRNA.probes = distinct(miRNA.probes)
miRNA.probes = miRNA.probes[,c("probe", "gene", "HGNC")]

# Compare the probes from miRBase to GENCODE and see if we want to combine both
GENCODE.probes = readRDS(paste0("Annotation/GENCODE_", plat, "_miRNA_probes.rds"))
overlapProbes = intersect(miRNA.probes$probe,GENCODE.probes$probe)
GENCODE.probes = GENCODE.probes[!GENCODE.probes$probe %in% overlapProbes, ] #43

saveRDS(miRNA.probes, paste0("Annotation/",plat, "_miRNA_probes.rds"))


# Generate lncRNA probes from NONCODE -------------------------------------
setwd("~/EpiMix/Annotation")
download.file("http://www.noncode.org/datadownload/NONCODEv6_human_hg38_lncRNA.gtf.gz", destfile = "NONCODEv6_human_hg38_lncRNA.gtf.gz")
gtf <- rtracklayer::import("NONCODEv6_human_hg38_lncRNA.gtf.gz")
gtf_df=as.data.frame(gtf)

# Functions to identify enhancer probes -----------------------------------
#' @details Find enhancer probes from the FANTOM human enhancer database
#' @param met.platform a character string indicating the methylation platform, can be either "EPIC" or "HM450"
#' @param genome a character string indicating the genome build, can be either "hg19" or "hg38"
#' @return a dataframe with enhancer probes and their chromosome coordinates
#' @examples
#'\dontrun{
met.platform = "EPIC"
genome = "hg38"
df.fantom.probes <-  getFantomProbes(met.platform = met.platform,  genome = genome) # total 9085 probes for EPIC array
target.Dir <- paste0(getwd(),"/Annotation")
#write.csv(df.fantom.probes,paste0(target.Dir, "/Fantom_",met.platform,"_Enhancer_Probes.csv"), row.names = FALSE)
saveRDS(df.fantom.probes,paste0(target.Dir, "/Fantom_",met.platform,"_Enhancer_Probes.rds"))
#' }
#'
#'
getFantomProbes <- function(met.platform = "EPIC", genome = "hg38", flankSeq = 100){
  # Step 1: Get probe annotation as a GRange object
  ProbeAnnotation <- EpiMix_getInfiniumAnnotation(plat = met.platform, genome = genome)

  # Step 2: fetch enhancer coordinate and save
  dir = paste0(getwd(), "/","Annotation")
  dir.create(dir, showWarnings = FALSE)
  base_url = "https://fantom.gsc.riken.jp/5/datafiles/latest/extra/Enhancers/"
  file = "human_permissive_enhancers_phase_1_and_2.bed.gz"
  file.source = paste0(base_url,file)
  destfile = paste0(dir, "/", file)
  if(!file.exists(destfile)) {
    if(Sys.info()["sysname"] == "Windows") mode <- "wb" else  mode <- "w"
    downloader::download(file.source, destfile = destfile, mode = mode)
  }
  Fantom.enhancers <- as.data.frame(read.table(file = destfile,header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
  enhancers <- GRanges(seqnames = Fantom.enhancers$V1,
                       ranges = IRanges(start = Fantom.enhancers$V2 - flankSeq, end = Fantom.enhancers$V3 + flankSeq, names = Fantom.enhancers$V4),
                       #strand =Rle(strand(FANTOM_enh$V6)),
                       score = (Fantom.enhancers$V5)
                      )
  cat("\tThere are", length(enhancers), "enhancers from the FANTOM database\n")
  enhancerProbes <- ProbeAnnotation[unique(queryHits(findOverlaps(ProbeAnnotation,enhancers,ignore.strand=TRUE)))]
  cat("\tFound", length(enhancerProbes), "CpG probes overlapping with the FANTOM enhancers\n")
  enhancerProbes <- names(enhancerProbes)

  # Step 5. Generate a dataframe for enhancer probes with their coordinates
  probe.ID = names(ProbeAnnotation)
  probe.chr = seqnames(ProbeAnnotation)
  probe.start.pos = start(ranges(ProbeAnnotation))
  probe.start.end = end(ranges(ProbeAnnotation))
  df.ProbeAnnotation <- data.frame(probeID = probe.ID, chr=probe.chr,start =probe.start.pos, end = probe.start.end)
  df.enhancer.probes <-  df.ProbeAnnotation[df.ProbeAnnotation$probeID %in% enhancerProbes, ]
  return(df.enhancer.probes)
}

# Find enhancer probes from the Roadmap Epigenomics
#' getEnhancerProbes
#' @details get the CpG probes that locate at the enhancer regions identified by the Roadmap epigenomics project
#' @param met.platform a character string indicating the methylation platform, can be either "EPIC" or "HM450"
#' @param genome a character string indicating the genome build, can be either "hg19" or "hg38"
#' @param functional.regions a character vector indicating the MNEMONIC chromatin states to retrive from the Roadmap epigenomics. Default values are active enhancers:"EnhA1", "EnhA2"
#' @param listOfEpigenomes a character vector indicting which epigenome(s) to use for finding enhancers.
#' @return a dataframe with enhancer probes and their chromosome coordinates
#' @examples
#'\dontrun{
  source("R/util.R")
  met.platform = "EPIC"
  genome = "hg38"
  listOfEpigenomes = c("E034", "E045", "E047")
  functional.regions = c("EnhA1", "EnhA2", "EnhG1", "EnhG2")
  target.Dir <- paste0(getwd(),"/Annotation")
  df.enhancer.probes <-  getEnhancerProbes(met.platform = met.platform,
                                           genome = genome,
                                           functional.regions = functional.regions,
                                           listOfEpigenomes = listOfEpigenomes) # total 551,335 probes for EPIC array, including 481,961("EnhA1", "EnhA2") probes

  #write.csv(df.enhancer.probes,paste0(target.Dir, "/Roadmap_", met.platform,"_Enhancer_Probes.csv"), row.names = FALSE)
  saveRDS(df.enhancer.probes,paste0(target.Dir, "/Roadmap_", met.platform,"_Enhancer_Probes.rds"))
#' }
#'
#'
getRoadMapEnhancerProbes <- function(met.platform = "EPIC", genome = "hg38", functional.regions=c("EnhA1", "EnhA2"), listOfEpigenomes = NULL){

  # Step 1. Find all the filenames ending with "_18_core_K27ac_hg38lift_mnemonics.bed.gz" from the Roadmap Epigenomics web portal
  K27Ac_url <- "https://egg2.wustl.edu/roadmap/data/byFileType/chromhmmSegmentations/ChmmModels/core_K27ac/jointModel/final/"
  urlData=getURL(K27Ac_url)
  urlData2=unlist(strsplit(urlData,"\\n"))
  filenames=as.matrix(urlData2[grep("_18_core_K27ac_hg38lift_mnemonics.bed.gz",urlData2)])
  filenames=unlist(strsplit(filenames, ">|<"))
  filenames=filenames[grep("_18_core_K27ac_hg38lift_mnemonics.bed.gz",filenames)]
  filenames=filenames[-grep("a href",filenames)]
  if(!is.null(listOfEpigenomes)){
    listOfEpigenomes = toupper(listOfEpigenomes)
    filenames = filenames[grep(paste(listOfEpigenomes,collapse="|"), filenames)]
  }

  # Step 2.Set the destination file directory and start to downloading files
  dir = file.path(getwd(), "ReferenceEpigenomes")
  dir.create(dir, showWarnings = FALSE)

  cat("\tDownloading chromatin states from the Roadmap epigenomics\n")
  for(file in filenames){
    file.source = paste0(K27Ac_url,file)
    destfile = paste0(dir, "/", file)
    if(!file.exists(destfile)) {
      if(Sys.info()["sysname"] == "Windows") mode <- "wb" else  mode <- "w"
      downloader::download(file.source, destfile = destfile, mode = mode)
    }
  }

  # Step 3. Get probe annotation as a GRange object
  cat("\tGetting probe annotation\n")
  ProbeAnnotation <- getInfiniumAnnotation(plat = met.platform, genome = genome)

  # Step 4. Get overlaps between probes and enhancers
  enhancerProbes = character(0)
  for(file in filenames){
    destfile = paste0(dir, "/", file)
    genome.state <- as.data.frame(read.table(file = destfile,header = FALSE, sep="\t",stringsAsFactors=FALSE, quote=""))
    colnames(genome.state)=c("chr","start","end", "state")
    genome.state$state = sapply(genome.state$state, function(x) unlist(strsplit(x, "_"))[2])
    genome.state = genome.state[genome.state$state %in% functional.regions, ]
    gr.enhancer = makeGRangesFromDataFrame(genome.state, ignore.strand = TRUE, keep.extra.columns = TRUE)
    target.probes = ProbeAnnotation[unique(queryHits(findOverlaps(ProbeAnnotation,gr.enhancer, ignore.strand = TRUE)))]
    this.epigenome = unlist(strsplit(file, "_"))[1]
    cat("\tIdentifed", length(target.probes), "enhancer probes from the epigenome", this.epigenome, "\n")
    enhancerProbes = c(enhancerProbes, names(target.probes))
    enhancerProbes = unique(enhancerProbes)
  }
  # Step 5. Generate a dataframe for enhancer probes with their coordinates
    probe.ID = names(ProbeAnnotation)
    probe.chr = seqnames(ProbeAnnotation)
    probe.start.pos = start(ranges(ProbeAnnotation))
    probe.start.end = end(ranges(ProbeAnnotation))
    df.ProbeAnnotation <- data.frame(probeID = probe.ID, chr=probe.chr,start =probe.start.pos, end = probe.start.end)
    df.enhancer.probes <-  df.ProbeAnnotation[df.ProbeAnnotation$probeID %in% enhancerProbes, ]
  return(df.enhancer.probes)
}

# EPIC array: combine FANTOM, RoadMap, and distal probes from ELMER
dir = paste0(getwd(), "/", "Annotation")

Roadmap.enhancers <- readRDS(paste0(dir, "/", "Roadmap_EPIC_Enhancer_Probes_large.rds")) #551,335
Fantom.enhancers <- readRDS(paste0(dir, "/", "Fantom_EPIC_Enhancer_Probes.rds"))   # n=9,085
distal.probes <- ELMER::get.feature.probe(met.platform = "EPIC", genome = "hg38") # n= 613,124
distal.probes <- names(distal.probes)

Roadmap.enhancers.distal <- intersect(Roadmap.enhancers$probeID,distal.probes) # n=394,945
Fantom.enhancers.distal <-  intersect(Fantom.enhancers$probeID,distal.probes)  # n=6,364
final.enhancer.probes <- unique(c(Roadmap.enhancers.distal, Fantom.enhancers.distal)) # n = 396,714
saveRDS(final.enhancer.probes, paste0(dir, "/", "EPIC_enhancer_probes.rds"))
#EPIC_enhancer_probes = readRDS(paste0(dir, "/", "EPIC_enhancer_probes.rds"))


# HM450 array: combine FANTOM, RoadMap, and distal probes from ELMER
dir = paste0(getwd(), "/", "Annotation")

Roadmap.enhancers <- read.csv(paste0(dir, "/", "Roadmap_HM450_Enhancer_Probes.csv")) # n=220,894
Fantom.enhancers <- read.csv(paste0(dir, "/", "Fantom_HM450_Enhancer_Probes.csv"))   # n=4,423
distal.probes <- ELMER::get.feature.probe(met.platform = "450K", genome = "hg38") # n= 160.862
distal.probes <- names(distal.probes)

length(setdiff(Fantom.enhancers, Roadmap.enhancers)) # n=4

Roadmap.enhancers.distal <- intersect(Roadmap.enhancers$probeID,distal.probes) # n=96,600
Fantom.enhancers.distal <-  intersect(Fantom.enhancers$probeID,distal.probes)  # n=1,723
final.enhancer.probes <- unique(c(Roadmap.enhancers.distal, Fantom.enhancers.distal)) # n = 97,123
saveRDS(final.enhancer.probes, paste0(dir, "/", "HM450_enhancer_probes.rds"))



# Fetch probe annotation as a dataframe
getProbeAnnotation <- function(met.platform = "EPIC", genome = "hg38", OutputRoot = paste0(getwd(),"/Data/")){
  dir.create(OutputRoot,showWarnings = FALSE)
  base = "https://zhouserver.research.chop.edu/InfiniumAnnotation"
  release.date =  "20180909"
  file.name = paste(met.platform,genome,"manifest.tsv.gz", sep = ".")
  downloadedFile = paste0(OutputRoot,file.name)
  file.source <- file.path(base,release.date,met.platform,file.name)
  if(!file.exists(downloadedFile)) {
    if(Sys.info()["sysname"] == "Windows") mode <- "wb" else  mode <- "w"
    downloader::download(file.source, destfile = downloadedFile, mode = mode)
  }
  ProbeAnnotation = read.table(file= downloadedFile, sep="\t", quote="", comment.char="",header=TRUE, check.names = FALSE)

  return(ProbeAnnotation)
}



